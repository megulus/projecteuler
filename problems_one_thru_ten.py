# coding=utf-8
from operator import *



#----------------------------------------------------------------------------------------------------------------------
'''
Problem 1: Multiples of three and five
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''

def multiples_of_three_and_five(an_integer):
    '''
    :param an_integer: an integer
    :return: sum of all multiples of 3 or 5 less than an_integer
    '''
    sum_multiples = 0
    for each_int in range(an_integer):
        if each_int % 3 == 0 or each_int % 5 == 0:
            sum_multiples += each_int
    return sum_multiples


#----------------------------------------------------------------------------------------------------------------------
'''
Problem 2: Even Fibonacci Numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def fib(n):
    '''
    on second thought, not using this b/c max recursion depth is exceeded when calculating this problem
    recursive fibonnaci function
    :param n: an integer > 0
    :return: the (n+1)th fibonacci term (if sequence begins with 0)
    '''
    if n < 0:
        return None
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n > 1:
        return fib(n - 1) + fib(n - 2)


def sum_even_fibonacci_rec(n):
    '''
    :param n: an integer
    :return: the sum of even-valued terms <= n in Fibonacci sequence
    '''
    sum_fib = 0
    i = 0
    fib_num = 0
    while fib_num <= n:
        fib_num = fib(i)
        i += 1
        if fib_num % 2 == 0:
            sum_fib += fib_num
    return sum_fib


def sum_even_fibonacci_it(n):
    '''
    replacing the recursive version b/c max recursion depth was exceeded
    :param n: an integer
    :return: sum of even-valued terms <= n in Fibonnaci sequence
    '''
    sum_fib = 0
    fib_num = 0
    one_previous = 1
    two_previous = 0
    while fib_num <= n:
        fib_num = one_previous + two_previous
        two_previous = one_previous
        one_previous = fib_num
        if fib_num % 2 == 0:
            sum_fib += fib_num
    return sum_fib

#----------------------------------------------------------------------------------------------------------------------

'''
Problem 3: Largest Prime Factor
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
'''

def get_prime_factors(n):
    factor = 2
    factored = n
    n_factors = []
    n_factors.append(1)
    while reduce(mul, n_factors) < n:
        if factored % factor == 0:
            n_factors.append(factor)
            factored = factored / factor
        else:
            factor += 1
    return n_factors


def get_largest_factor(n):
    '''
    :param: an integer
    :return: the largest prime factor of n
    '''
    factors = get_prime_factors(n)
    return max(factors)


#----------------------------------------------------------------------------------------------------------------------


'''
Problem 4: Largest Palindrome Product
A palindromic number reads the same both ways.
The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''

def is_palindrome_it(digits):
    '''
    determines iteratively whether a list of integers is palindromic
    :param digits: list of integers
    :return: True or False
    '''
    digits_copy = list(digits)
    while len(digits_copy) > 1:
        if digits_copy[0] == digits_copy[-1]:
            digits_copy.pop(0)
            digits_copy.pop(-1)
        else:
            return False
    return True



def is_palindrome(digits):
    '''
    determines recursively whether a list of integers is palindromic
    :param digits: list of integers
    :return: True or False
    '''
    digits_copy = list(digits) # create copy of digits b/c this function mutates the list that is passed to it
    if len(digits_copy) <= 1:
        return True
    else:
        first = digits_copy.pop(0)
        last = digits_copy.pop(-1)
        if first == last:
            if is_palindrome(digits_copy):
                return True
            else:
                return False
        else:
            return False



def largest_palindrome_product(lowerbound, upperbound):
    '''
    return the largest palindrome product of numbers in range lowerbound - upperbound
    :param: lowerbound - lower bound of range
    :param: upperbound - upper bound of range
    :return: largest palindromic product of two three-digit numbers
    '''
    maxproduct = 0
    result = {}
    for i in range(lowerbound, upperbound):
        for j in range(lowerbound, upperbound):
            product = i * j
            digits = map(int, str(product)) # turn product into a list of its component digits
            if product > maxproduct:
                if is_palindrome_it(digits):
                    maxproduct = product
                    result['maxproduct'] = maxproduct
                    result['factor1'] = i
                    result['factor2'] = j
    return result




#----------------------------------------------------------------------------------------------------------------------
'''
Problem 5: Smallest multiple
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''

def smallest_multiple_factors(lowerbound, upperbound):
    '''
    This version finds the set of prime factors for all the integers in the range lowerbound - upperbound. It then finds
    the product of that set, which should be the smallest multiple of the range.
    :param lowerbound: an integer
    :param upperbound: an integer
    :return: product of the range's factors (integer)
    '''
    all_prime_factors = []
    for i in range(lowerbound, upperbound + 1):
        i_factors = get_prime_factors(i)
        for j in all_prime_factors:
            if j in i_factors:
                i_factors.pop(i_factors.index(j))
        all_prime_factors.extend(i_factors)
    return reduce(mul, all_prime_factors)


def smallest_multiple_iter(lowerbound, upperbound):
    '''
    Note: this is a brute force, make-the-computer-do-the-thinking method of solving this problem. It works, but it's
    slow.
    :param lowerbound: an integer
    :param upperbound: an integer
    :return: smallest multiple of range defined by lowerbound - upperbound
    '''
    multiple = None
    dividend = upperbound # any numbers < upperbound not evenly divisible by upperbound, so start here
    divisors = list(range(lowerbound, upperbound + 1))
    while multiple == None:
        if filter(lambda x: dividend % x == 0, divisors) == divisors:
            multiple = dividend
        else:
            dividend += 1
    return multiple

#----------------------------------------------------------------------------------------------------------------------

'''
Problem 6: Sum Square Difference
The sum of the squares of the first ten natural numbers is
1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is
(1 + 2 + ... + 10)^2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
3025 − 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
'''

def find_sum_square_difference(lowerbound, upperbound):
    sum_squares = 0
    sum_naturals = 0
    for i in range(lowerbound, upperbound + 1):
        square = i*i
        sum_squares += square
        sum_naturals += i
    square_sum = sum_naturals * sum_naturals
    return square_sum - sum_squares


#----------------------------------------------------------------------------------------------------------------------
'''
Problem 7: 10,001st prime
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10,001st prime number?
'''

def is_prime(n):
    factors = get_prime_factors(n)
    if len(factors) == 2:
        return True
    else:
        return False


def find_nth_prime(n):
    primes = []
    current = 1
    while len(primes) < n:
        if is_prime(current):
            primes.append(current)
        current += 1
    return primes[-1]

#----------------------------------------------------------------------------------------------------------------------

'''
Problem 8: Largest product in a series
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of
this product?
'''

def find_largest_product(series, length):
    '''
    :param series: integer in which the product of adjacent digits is to be found
    :param length: number of adjacent digits that will compose the product
    :return dictionary containing the product and the list of adjacent digits that compose it
    '''
    all_products = []
    products_dict = {}
    digits = map(int, str(series))
    factors = []
    while len(digits) >= length:
        first_factor = digits.pop(0)
        factors.append(str(first_factor))
        product = first_factor
        for j in range(length-1):
            next_factor = digits[j]
            factors.append(str(next_factor))
            product *= next_factor
        all_products.append(product)
        products_dict[product] = factors
        factors = []
    largest_product = max(all_products)
    largest_product_factors = products_dict[largest_product]
    return {'product': str(largest_product), 'factors': largest_product_factors}

#----------------------------------------------------------------------------------------------------------------------

'''
Problem 9: Special Pythagorean triplet
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc
'''

def is_pythagorean(a, b, c):
    if (a < b and b < c) and (a**2 + b**2 == c**2):
        return True
    else:
        return False

def find_special_pythagorean(target_sum):
    special_triplet_product = 0
    result = {}
    for i in range(target_sum):
        for j in range(i+1, target_sum + 1):
            if special_triplet_product != 0:
                break
            k = target_sum - j - i
            print i, j, k
            if is_pythagorean(i, j, k):
                special_triplet_product = i * j * k
                result['triplet'] = [i, j, k]
                result['product'] = special_triplet_product
    return result

#----------------------------------------------------------------------------------------------------------------------

'''
Problem 10: Summation of Primes
The sum of the primes < 10 is: 2 + 3 + 5 + 7 = 17
Find the sum of all the primes below two million.
'''

def is_nonprime(anumber):
    '''
    because get_prime_factors is costly, this does a quick and dirty screen for NON-primeness before confirming that a number is truly prime. Most numbers will be pretty easily screened out, significantly lowering the number of candidates that need to be fully tested for primeness
    :param anumber: integer
    :return True or False
    '''
    for each in range(2, 14):
        if each != anumber:
            if anumber % each == 0:
                return True
    return False


def sum_primes(ceiling):
    sumprimes = 0
    for i in range(ceiling):
        if not is_nonprime(i):
            if is_prime(i):
                print i
                sumprimes += i
    return sumprimes









#----------------------------------------------------------------------------------------------------------------------

def main():
    '''
    # Problem 1:
    n = 1000
    multsum = multiples_of_three_and_five(n)
    print 'sum of multiples of three and five below {}: {}'.format(n, multsum)
    # Problem 2:
    n = 4000000
    fibs = sum_even_fibonacci_it(n)
    print 'sum of even fibonnaci numbers less than {}: {}'.format(n, fibs)
    # Problem 3:
    n = 600851475143
    largest_prime = largest_prime_factor(n)
    print 'largest prime factor of {}: {}'.format(n, largest_prime)
    # Problem 4:
    lower = 100
    upper = 1000
    result = largest_palindrome_product(lower, upper)
    print 'largest palindrome product of factors between {} and {} is: {} x {} = {}'.format(lower, upper, result['factor1'], result['factor2'], result['maxproduct'])
    # Problem 5
    lower = 1
    upper = 20
    result = smallest_multiple_factors(lower, upper)
    print 'Smallest multiple of each of the numbers from {} to {} is: {}'.format(lower, upper, result)
    # Problem 6
    lower = 1
    upper = 100
    result = find_sum_square_difference(lower, upper)
    print 'The difference between the squared sum and the sum of squares of the numbers {} through {} is: {}'.format(lower, upper, result)
    # Problem 7
    n = 10001
    result = find_nth_prime(n)
    print 'Prime number {} is: {}'.format(n, result)
    # Problem 8
    series = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    test_series = 221410998912301
    length = 13
    result_dict = find_largest_product(series, length)
    factors_list = result_dict['factors']
    product = result_dict['product']
    var_string = '{} x ' * (length - 1) + '{} = {answer}'
    print var_string
    print 'The largest product in the series is ' + var_string.format(*factors_list, answer=product)
    # Problem 9
    result_dict = find_special_pythagorean(1000)
    triplet = result_dict['triplet']
    product = result_dict['product']
    print 'The special Pythagorean triplet whose sum is 1000 is: {}, {} and {}. Their product is {}'.format(triplet[0], triplet[1], triplet[2], product)
    '''
    # Problem 10
    ceiling = 2000000
    answer = sum_primes(ceiling)
    print 'The sum of primes < {} is {}'.format(ceiling, answer)







if __name__=='__main__':
    main()